// This function is utilized to insert the name of the user (currently logged in) into the navbar.
// This gives the user a personalized view of the app.
function insertName() {
  firebase.auth().onAuthStateChanged((user) => {
    // Check if a user is signed in:
    if (user) {
      user_Name = user.displayName;
      $("#name-goes-here").text(user_Name);
    }
  });
}
insertName(); //invoke the function

// this function fetches list data and task data (within subcollection) from the database and populates the lists on the main page.
function insertCards() {
  // template for a list (html code present within body in index.html)
  let listCard = document.getElementById("listCardTemplate");

  // the big container where we append our lists.
  let listDiv = document.getElementById("lists-go-here");

  // authenticating.
  firebase.auth().onAuthStateChanged((user) => {
    // Check if a user is signed in:
    if (user) {
      // user name for current user.
      user_Name = user.displayName;
      // our database has the following structure: users(collection) > user.uid (randomly generated IDs for each doc) > lists (collection)
      // within the lists collection, we have a number of auto-ID documents that store the info of every list for a given user.
      db.collection("users")
        .doc(user.uid)
        .collection("lists")
        .orderBy("timestamp")
        .get()
        //
        .then(function (insertLists) {
          // function to loop through each list doc present in the lists collection.
          insertLists.forEach(function (doc) {
            // as the list docs have UIDs generated by firebase, we are assigning it to a variable to use further down the loop.
            // this id is helpful when we are inserting the tasks to the list they belong to.
            let listID = doc.id;
            // this accesses the current list document and fetches the list title and assigns it to a variable for use.
            var listTitle = doc.data().title;

            // cloning the template for inserting the current list doc within loop.
            let currentList = listCard.content.cloneNode(true);
            // setting an listID to the div where we will append tasks to later.
            // the logic behind this is appending tasks for a specific list to a div that has the same listID.
            currentList
              .querySelector(".tasks-go-here")
              .setAttribute("id", listID);
            // putting the list title
            currentList.querySelector(".card-title").innerHTML = listTitle;
            // assigning the delete list button a string with the listID so the event listener can trim the string and get the listID to delete.
            // our logic here, is to be able to identify exactly which list the delete list function was invoked from and then to delete that list doc using its ID.
            currentList
              .querySelector(".deleteListBtn")
              .setAttribute("id", "0" + doc.id); // 0 is just a placeholder to remove later, the 0 just ensures we aren't assigning same listID to multiple divs.

            // our database structure for tasks follows this sequence, list-doc (auto-id) > tasks (sub-collection) > task-docs(auto-id) > details; state;
            db.collection("users") // users collection
              .doc(user.uid) // user uid
              .collection("lists") // lists collection
              .doc(listID) // listID; we assigned this in the loop beforehand.
              .collection("tasks") // tasks sub-collection
              .get()
              .then(function (insertTasks) {
                // taskItem stores ref to the taskItem template
                let taskItem = document.getElementById("taskItemTemplate");
                // let taskList = document.getElementById("tasks-go-here");

                // this statement is like a loop (that inserts tasks to a list) inside a loop that is itself inserting lists to a container.
                insertTasks.forEach(function (doc) {
                  // console.log(doc.id);
                  // console.log(doc.id);
                  // console.log(doc.data().details)

                  // fetch task detail from the current task doc.
                  let taskDetails = doc.data().details;
                  // fetch state of the current task from current task doc and assign it to a variable. state is a boolean which is set to true if task is completed else false.
                  let isChecked = doc.data().state;

                  // place where the tasks will be inserted.
                  let tasksDiv = document.getElementById(listID); // remember we assigned listID to a div inside the cloned list?, now we use that id to reference that div and insert tasks to the right list.
                  // cloning the taskItem template
                  let currentTask = taskItem.content.cloneNode(true);
                  // setting task doc id from the database to the current task item for later use.
                  currentTask
                    .querySelector(".taskItemContainer")
                    .setAttribute("id", doc.id);
                  // selecting the current task checkbox
                  let checkbox = currentTask.querySelector(".taskCheckbox");
                  // check the state of task and then change the checkbox to match task completion.
                  if (isChecked == true) {
                    checkbox.checked = true;
                  } else {
                    checkbox.checked = false;
                  }
                  // giving a checkbox an id with a string that contains the task id from firebase. We have event listeners on the checkboxes, by reading the id of the checkbox
                  // that was clicked we can determine which task to update within the database.
                  checkbox.setAttribute("id", "c" + doc.id);

                  // putting in the task detail within the currentTask clone.
                  currentTask.querySelector(".taskDetail").innerHTML =
                    taskDetails;

                  // appending the currentTask to the list. tasksDiv is the div with listID for the current task to be inserted to
                  tasksDiv.appendChild(currentTask);
                });
                // loop for inserting tasks over
              });
            // insert currentList to the bigger listDiv.
            listDiv.appendChild(currentList);
          });
          // loop ends for insertList

          // an informative feedback we added in. Only displays when there are 0 zero lists on the page, tellinng user what to do next.
          if (document.querySelectorAll(".card").length == 0) {
            console.log(document.querySelectorAll(".card").length);
            let currentList = listCard.content.cloneNode(true);
            currentList.querySelector(".card-title").innerHTML =
              "Click (+) below to create a list";
            currentList.querySelector(".card").setAttribute("id", "welcome");
            listDiv.appendChild(currentList);
          }
        });
    }
  });
}
insertCards(); // invoke the function

// get search bar element
const searchInput = document.getElementById("searchbar");
// store name elements in array-like object
const namesFromDOM = document.getElementsByClassName("card-title"); // fetching all the list titles to search from
// listen for user events (key presses)
searchInput.addEventListener("keyup", (event) => {
  const { value } = event.target;
  // get user search input converted to lowercase
  const searchQuery = value.toLowerCase();

  for (const nameElement of namesFromDOM) {
    // store name text and convert to lowercase
    let name = nameElement.textContent.toLowerCase();

    // compare current name to search input
    if (name.includes(searchQuery)) {
      // found name matching search, display it
      nameElement.parentElement.parentElement.style.display = "block";
    } else {
      // no match, don't display name
      nameElement.parentElement.parentElement.style.display = "none";
    }
  }
});

// function below for updating current task state within the database. this function is invoked when the checkbox is clicked. (the on-click function has been added within the template itself)
var currentCheckboxState;
function changeCheckboxState(checkbox) {
  firebase.auth().onAuthStateChanged((user) => {
    // Check if a user is signed in:
    if (user) {
      // getting the taskID from the div we assigned it to earlier in the insertCards function.
      let currentTaskID = checkbox.parentElement.getAttribute("id");
      // getting the listID .
      let currentListID =
        checkbox.parentElement.parentElement.getAttribute("id");
      let currentCheckboxState = checkbox.checked; // variable that stores the state of the checkbox.

      if (currentCheckboxState == false) {
        db.collection("users")
          .doc(user.uid)
          .collection("lists")
          .doc(currentListID) // our lists have random IDs so this is why we assigned them to divs to be able to access them correctly in other functions.S
          .collection("tasks")
          .doc(currentTaskID) // task ID from where the checkbox function was called from
          .update({
            state: false,
          });
      } else {
        db.collection("users")
          .doc(user.uid)
          .collection("lists")
          .doc(currentListID)
          .collection("tasks")
          .doc(currentTaskID)
          .update({
            state: true,
          });
      }
    }
  });
}

// function to delete a list from the database.
function handleCloseButtonClick(buttonItself) {
  let idToDelete = buttonItself.getAttribute("id");
  idToDelete = idToDelete.substring(1);
  firebase.auth().onAuthStateChanged((user) => {
    let doc = db.collection("users").doc(user.uid);
    doc.collection("lists").doc(idToDelete).delete();
  });

  // removing the event listener on the button after the list is deleted so the console doesn't show any errors
  let pointer = buttonItself;
  while (pointer.className !== "card") {
    pointer = pointer.parentElement;
  }
  pointer.parentElement.removeChild(pointer);
  let listCard = document.getElementById("listCardTemplate");
  let listDiv = document.getElementById("lists-go-here");

  if (document.querySelectorAll(".card").length == 0) {
    let currentCard = listCard.content.cloneNode(true);
    currentCard.querySelector(".card-title").innerHTML =
      "Click + to add new List";
    currentCard.querySelector(".card").setAttribute("id", "welcome");
    listDiv.appendChild(currentCard);
  }
}
